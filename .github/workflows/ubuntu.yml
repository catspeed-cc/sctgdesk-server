name: Build for Ubuntu 22.04
on:
  workflow_dispatch:
  push:
    branches:
      - tcpserver-master-build
      - armhf

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   target: "x86_64-unknown-linux-gnu", cc: "gcc" , cflags: "" }
          - { name: "arm64v8", target: "aarch64-unknown-linux-gnu", cc: "aarch64-linux-gnu-gcc", cflags: "-O0 -ffunction-sections -fdata-sections -fPIC"}
          - { name: "armv7hf", target: "armv7-unknown-linux-gnueabihf", cc: "arm-linux-gnueabihf-gcc", cflags: "-O0 -ffunction-sections -fdata-sections -fPIC" }
          - { name: "i386",    target: "i686-unknown-linux-gnu", cc: "i686-linux-gnu-gcc", cflags: "-m32" }
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: write
      packages: write
      attestations: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl build-essential debhelper devscripts pkg-config libssl-dev libsqlite3-dev zip binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu binutils-arm-linux-gnueabihf gcc-arm-linux-gnueabihf binutils-i686-linux-gnu gcc-i686-linux-gnu

    - name: Install Rust toolchain
      uses: crusty-pie/toolchain@main
      with:
          profile: minimal
          toolchain: stable
          override: true
          targets: ${{ matrix.job.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
            path: ~/.cargo/registry
            key: ubuntu-cargo-registry-${{ matrix.job.target }}-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
            path: ~/.cargo/git
            key: ubuntu-cargo-git-${{ matrix.job.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
            path: target
            key: ubuntu-cargo-build-target-${{ matrix.job.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
          node-version: '20'

    - name: Build project
      run: |
        cargo update -p sctgdesk-api-server
        export CC=${{ matrix.job.cc }}
        export CFLAGS="${{ matrix.job.cflags }}"
        DATABASE_URL=sqlite://$(pwd)/db_v2.sqlite3 cargo build --release --target=${{ matrix.job.target }}
        ls -lR target

    - name: Attest release
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'target/${{ matrix.job.target }}/release/hbbs, target/${{ matrix.job.target }}/release/hbbr, target/${{ matrix.job.target }}/release/rustdesk-utils'

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu_${{ matrix.job.target }}
        path: |
          target/${{ matrix.job.target }}/release/hbbs
          target/${{ matrix.job.target }}/release/hbbr
          target/${{ matrix.job.target }}/release/rustdesk-utils