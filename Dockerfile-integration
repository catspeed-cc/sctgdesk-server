# syntax=docker/dockerfile:experimental
# Copyright 2024 SCTG Development - Ronan LE MEILLAT
# SPDX-License-Identifier: AGPL-3.0-or-later
FROM node:lts-bookworm AS builder
ENV NODE_VERSION=20.18.0
RUN apt-get update && apt-get install -y curl build-essential debhelper devscripts pkg-config libssl-dev zip git sqlite3
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
RUN mkdir /build
COPY src /build/src
COPY libs /build/libs
COPY Cargo.toml /build/Cargo.toml
COPY Cargo.lock /build/Cargo.lock
COPY build.rs /build/build.rs
COPY db_v2.sqlite3 /build/db_v2.sqlite3
# Ensure the database contains a test peer
RUN echo "INSERT OR IGNORE INTO peer (guid, id, uuid, pk, created_at, 'user', status, note, region, strategy, info, last_online) VALUES(x'018f255622f77778a006702ca5c23715', 'TESTUSER', randomblob(16), randomblob(16), '1901-01-01 12:00:00', randomblob(16), 0, '', NULL, randomblob(16), '{}', '1901-01-01 12:00:00');" | sqlite3 /build/db_v2.sqlite3
# Set up cargo config to use git tool
# this workaround is needed because QEMU emulating 32 bits platfom on 64 bits host
# see https://github.com/rust-lang/cargo/issues/8719
RUN mv /root/.cargo /tmp && rm -rf /root/.cargo && mkdir -p /root/.cargo 
RUN --mount=type=tmpfs,target=/root/.cargo mkdir -p /root/.cargo \
    && cp -av /tmp/.cargo/* /root/.cargo/ && ls -lR /root/.cargo \
    && if [ ! -f /root/.cargo/config.toml ]; then \
        echo "" > /root/.cargo/config.toml; \
    fi && \
    awk 'BEGIN{net_section=0;git_fetch_found=0;printed=0}/^\[net\]/{net_section=1;print;next}/^\[/{if(net_section&&!git_fetch_found){print "git-fetch-with-cli = true";printed=1}net_section=0;print;next}net_section&&/^git-fetch-with-cli\s*=/{print "git-fetch-with-cli = true";git_fetch_found=1;next}{print}END{if(!printed&&!git_fetch_found){if(!net_section)print "\n[net]";print "git-fetch-with-cli = true"}}' /root/.cargo/config.toml > /root/.cargo/config.tmp && \
    mv /root/.cargo/config.tmp /root/.cargo/config.toml \
    && . /root/.cargo/env && cd /build \ 
    && cargo update -p sctgdesk-api-server \
    && DATABASE_URL=sqlite://$(pwd)/db_v2.sqlite3 cargo build --release \
    && mkdir -p /build/ubuntu-jammy/bin \
    && cp /build/target/release/hbbr /build/ubuntu-jammy/bin/ \
    && cp /build/target/release/hbbs /build/ubuntu-jammy/bin/ \
    && cp /build/target/release/rustdesk-utils /build/ubuntu-jammy/bin/
COPY systemd /build/ubuntu-jammy/systemd
COPY debian /build/ubuntu-jammy/debian
RUN cd /build/ubuntu-jammy \
    && cat debian/control.tpl | sed "s/{{ ARCH }}/$(dpkg --print-architecture)/" > debian/control \
    && rm debian/control.tpl \
    && debuild -i -us -uc -b -a$(dpkg --print-architecture)
COPY oauth2.toml /build/ubuntu-jammy/bin/oauth2.toml

# Note ubuntu:jammy is the based on Debian:bookworm so the deb packages and the binaried are compatible
FROM ubuntu:jammy
RUN mkdir -p /usr/local/share/debpackages
COPY --from=builder /build/*.deb /usr/local/share/debpackages
COPY --from=builder /build/target/release/hbbs /usr/local/bin/hbbs
COPY --from=builder /build/ubuntu-jammy/bin/oauth2.toml /usr/local/bin/oauth2.toml
COPY --from=builder /build/target/release/hbbr /usr/local/bin/hbbr
COPY --from=builder /build/target/release/rustdesk-utils /usr/local/bin/rustdesk-utils
